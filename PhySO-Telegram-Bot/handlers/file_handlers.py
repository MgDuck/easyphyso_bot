#!/usr/bin/env python3
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è Telegram –±–æ—Ç–∞
"""
import os
import tempfile
import logging
import io
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from services import user_service, physo_api_service
from utils.file_utils import validate_csv_file, read_csv_content
from config.settings import UPLOAD_DIR, RESULTS_DIR, DEFAULT_EPOCHS, MIN_CREDITS_FOR_PREDICTION

logger = logging.getLogger(__name__)

# –°–µ—Ä–≤–∏—Å—ã –ø–æ–¥–∫–ª—é—á–∞—é—Ç—Å—è –∫–∞–∫ —Å–∏–Ω–≥–ª—Ç–æ–Ω—ã –≤ services.__init__

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    user = update.effective_user
    telegram_id = str(user.id)
    document = update.message.document
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = user_service.get_user(telegram_id)
    if not user_data:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if not document.file_name.endswith('.csv'):
        await update.message.reply_text(
            "‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ CSV —Ñ–∞–π–ª—ã!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /sample –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞."
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 5MB)
    if document.file_size > 5 * 1024 * 1024:
        await update.message.reply_text("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º 5MB.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã
    if user_data['credits'] < MIN_CREDITS_FOR_PREDICTION:
        await update.message.reply_text(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤!\n"
            f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º {MIN_CREDITS_FOR_PREDICTION} –∫—Ä–µ–¥–∏—Ç–æ–≤.\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['credits']} –∫—Ä–µ–¥–∏—Ç–æ–≤.\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_credits –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è."
        )
        return
    
    await update.message.reply_text("üì• –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...")
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await context.bot.get_file(document.file_id)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –ø–∞–ø–∫–µ uploads
        import uuid
        filename = f"{telegram_id}_{uuid.uuid4().hex[:8]}.csv"
        tmp_path = os.path.join(UPLOAD_DIR, filename)
        await file.download_to_drive(tmp_path)
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–∞–π–ª
        validation = validate_csv_file(tmp_path)
        
        if not validation['valid']:
            os.unlink(tmp_path)
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ: {validation['error']}")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤ user_service
        context.user_data['csv_file_path'] = tmp_path
        context.user_data['csv_validation'] = validation
        context.user_data['csv_filename'] = document.file_name
        
        # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        user_service.save_user_file_info(telegram_id, {
            'csv_file_path': tmp_path,
            'csv_validation': validation,
            'csv_filename': document.file_name
        })
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        info_text = f"""‚úÖ <b>–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!</b>

üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö:</b>
‚Ä¢ –†–∞–∑–º–µ—Ä: {validation['shape'][0]} —Å—Ç—Ä–æ–∫, {validation['shape'][1]} —Å—Ç–æ–ª–±—Ü–æ–≤
‚Ä¢ –°—Ç–æ–ª–±—Ü—ã: {', '.join(validation['columns'])}
‚Ä¢ –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è —Ü–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: <code>{validation['suggested_y']}</code>
‚Ä¢ –í—Ö–æ–¥–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: <code>{', '.join(validation['suggested_x'])}</code>

üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:</b>
–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö (–±–æ–ª—å—à–µ = —Ç–æ—á–Ω–µ–µ, –Ω–æ –¥–æ—Ä–æ–∂–µ):"""
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —ç–ø–æ—Ö
        keyboard = [
            [InlineKeyboardButton("‚ö° 10 —ç–ø–æ—Ö (~2 –∫—Ä–µ–¥–∏—Ç–∞)", callback_data="epochs_10"),
             InlineKeyboardButton("üî• 20 —ç–ø–æ—Ö (~3 –∫—Ä–µ–¥–∏—Ç–∞)", callback_data="epochs_20")],
            [InlineKeyboardButton("üíé 50 —ç–ø–æ—Ö (~6 –∫—Ä–µ–¥–∏—Ç–æ–≤)", callback_data="epochs_50"),
             InlineKeyboardButton("üöÄ 100 —ç–ø–æ—Ö (~11 –∫—Ä–µ–¥–∏—Ç–æ–≤)", callback_data="epochs_100")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", callback_data="custom_params")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(info_text, reply_markup=reply_markup, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if 'tmp_path' in locals():
            try:
                os.unlink(tmp_path)
            except:
                pass

async def process_prediction(update: Update, context: ContextTypes.DEFAULT_TYPE, epochs: int, config: str = "config0"):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è PhySO"""
    query = update.callback_query
    telegram_id = str(update.effective_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∏–ª–∏ –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    csv_file_path = None
    if 'csv_file_path' in context.user_data:
        csv_file_path = context.user_data['csv_file_path']
    else:
        # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        file_info = user_service.get_user_file_info(telegram_id)
        if file_info and os.path.exists(file_info['csv_file_path']):
            csv_file_path = file_info['csv_file_path']
            context.user_data['csv_file_path'] = csv_file_path
            context.user_data['csv_validation'] = file_info['csv_validation']
            context.user_data['csv_filename'] = file_info['csv_filename']
    
    if not csv_file_path or not os.path.exists(csv_file_path):
        await query.edit_message_text("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ.")
        return
    
    user_data = user_service.get_user(telegram_id)
    if not user_data:
        await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞)
    base_costs = {"config0": 1, "config1": 2, "config2": 3}
    epoch_costs = {"config0": 0.1, "config1": 0.2, "config2": 0.3}
    
    total_cost = int(base_costs[config] + epoch_costs[config] * epochs)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã
    if user_data['credits'] < total_cost:
        await query.edit_message_text(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤!\n"
            f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ: {total_cost} –∫—Ä–µ–¥–∏—Ç–æ–≤\n"
            f"–£ –≤–∞—Å: {user_data['credits']} –∫—Ä–µ–¥–∏—Ç–æ–≤"
        )
        return
    
    await query.edit_message_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ PhySO...")
    
    try:
        # –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª
        csv_content = read_csv_content(context.user_data['csv_file_path'])
        if not csv_content:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ PhySO API
        prediction_result = await physo_api_service.create_prediction(
            user_id=user_data['physo_user_id'],
            api_key=user_data['physo_api_key'],
            csv_data=csv_content,
            epochs=epochs,
            config=config
        )
        
        if not prediction_result:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ PhySO API")
            return

        # –°–ø–∏—Å—ã–≤–∞–µ–º –∫—Ä–µ–¥–∏—Ç—ã
        updated_user = user_service.spend_credits(telegram_id, total_cost)
        if not updated_user:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        status = prediction_result.get('status', 'unknown')
        remaining_credits = updated_user['credits']
        prediction_result.setdefault('total_cost', total_cost)
        prediction_result.setdefault('epochs', epochs)
        prediction_result.setdefault('run_config', config)
        
        if status == 'completed':
            result_text = f"""‚úÖ <b>–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>

üßÆ <b>–ù–∞–π–¥–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞:</b> <code>{prediction_result.get('best_formula', 'N/A')}</code>
üìä <b>–¢–æ—á–Ω–æ—Å—Ç—å (R¬≤):</b> {prediction_result.get('best_r2', 'N/A')}
‚ö° <b>–≠–ø–æ—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> {epochs}
‚è±Ô∏è <b>–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:</b> {prediction_result.get('process_time', 'N/A')} –º—Å
üéØ <b>–ü–∞—Ä–µ—Ç–æ-—Ä–µ—à–µ–Ω–∏–π:</b> {prediction_result.get('pareto_count', 'N/A')}

üí∞ <b>–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤:</b> {total_cost}
üí≥ <b>–û—Å—Ç–∞—Ç–æ–∫:</b> {remaining_credits} –∫—Ä–µ–¥–∏—Ç–æ–≤

UUID: <code>{prediction_result.get('uuid', 'N/A')}</code>"""
        elif status == 'failed':
            result_text = f"""‚ùå <b>–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å</b>

–ü—Ä–∏—á–∏–Ω–∞: {prediction_result.get('best_formula', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}

üí∞ <b>–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤:</b> {total_cost}
üí≥ <b>–û—Å—Ç–∞—Ç–æ–∫:</b> {remaining_credits} –∫—Ä–µ–¥–∏—Ç–æ–≤

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        else:
            result_text = f"""‚è≥ <b>–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ</b>

–°—Ç–∞—Ç—É—Å: {status}
UUID: <code>{prediction_result.get('uuid', 'N/A')}</code>

üí∞ <b>–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤:</b> {total_cost}
üí≥ <b>–û—Å—Ç–∞—Ç–æ–∫:</b> {remaining_credits} –∫—Ä–µ–¥–∏—Ç–æ–≤"""
        
        await query.edit_message_text(result_text, parse_mode='HTML')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π SR_curves_pareto.csv, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
        pareto_csv = prediction_result.get('pareto_csv')
        if status == 'completed' and pareto_csv and pareto_csv.get('content'):
            try:
                buffer = io.BytesIO(pareto_csv['content'].encode('utf-8'))
                buffer.name = pareto_csv.get('filename', 'SR_curves_pareto.csv')
                await context.bot.send_document(
                    chat_id=update.effective_chat.id,
                    document=buffer,
                    filename=buffer.name,
                    caption="üìà Pareto-—Ñ—Ä–æ–Ω—Ç –æ—Ç PhySO"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SR_curves_pareto.csv: {e}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
    
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            os.unlink(context.user_data['csv_file_path'])
            del context.user_data['csv_file_path']
        except:
            pass

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —ç–ø–æ—Ö
async def epochs_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ø–æ—Ö"""
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith("epochs_"):
        epochs = int(query.data.split("_")[1])
        await process_prediction(update, context, epochs, "config0")
    
    elif query.data == "custom_params":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        keyboard = [
            [InlineKeyboardButton("Config0 (–±–∞–∑–æ–≤—ã–π)", callback_data="config_config0"),
             InlineKeyboardButton("Config1 (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π)", callback_data="config_config1")],
            [InlineKeyboardButton("Config2 (–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π)", callback_data="config_config2")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_epochs")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "‚öôÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é PhySO:</b>\n\n"
            "‚Ä¢ <b>Config0</b> - –±–∞–∑–æ–≤–∞—è (–±—ã—Å—Ç—Ä–æ, –¥–µ—à–µ–≤–æ)\n"
            "‚Ä¢ <b>Config1</b> - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è (—Å—Ä–µ–¥–Ω–µ)\n" 
            "‚Ä¢ <b>Config2</b> - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è (–º–µ–¥–ª–µ–Ω–Ω–æ, –¥–æ—Ä–æ–≥–æ)\n\n"
            "–ó–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö.",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    
    elif query.data.startswith("config_"):
        config = query.data.split("_")[1]
        context.user_data['selected_config'] = config
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —ç–ø–æ—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        costs = {"config0": "1+0.1", "config1": "2+0.2", "config2": "3+0.3"}
        
        keyboard = [
            [InlineKeyboardButton(f"10 —ç–ø–æ—Ö (~{int(1 + 0.1*10)} –∫—Ä–µ–¥–∏—Ç–æ–≤)", callback_data=f"custom_epochs_10"),
             InlineKeyboardButton(f"20 —ç–ø–æ—Ö (~{int(1 + 0.1*20)} –∫—Ä–µ–¥–∏—Ç–æ–≤)", callback_data=f"custom_epochs_20")],
            [InlineKeyboardButton(f"50 —ç–ø–æ—Ö (~{int(1 + 0.1*50)} –∫—Ä–µ–¥–∏—Ç–æ–≤)", callback_data=f"custom_epochs_50"),
             InlineKeyboardButton(f"100 —ç–ø–æ—Ö (~{int(1 + 0.1*100)} –∫—Ä–µ–¥–∏—Ç–æ–≤)", callback_data=f"custom_epochs_100")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="custom_params")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"‚ö° <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö –¥–ª—è {config.upper()}:</b>\n\n"
            f"–§–æ—Ä–º—É–ª–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏: {costs[config]} –∫—Ä–µ–¥–∏—Ç–æ–≤ –∑–∞ —ç–ø–æ—Ö—É",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    
    elif query.data.startswith("custom_epochs_"):
        epochs = int(query.data.split("_")[2])
        config = context.user_data.get('selected_config', 'config0')
        await process_prediction(update, context, epochs, config)
